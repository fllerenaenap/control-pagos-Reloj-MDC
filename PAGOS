<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Seguimiento de Pagos del Grupo</title>
    <!-- Carga de Tailwind CSS para el diseño -->
    <script src="https://cdn.tailwindcss.com"></script>
    <!-- Carga de la librería Chart.js para los gráficos -->
    <script src="https://cdn.jsdelivr.net/npm/chart.js@4.4.3/dist/chart.umd.min.js"></script>
    <style>
        /* Configuración de fuente Inter para un aspecto moderno */
        body {
            font-family: 'Inter', sans-serif;
            background-color: #f3f4f6;
        }
    </style>
</head>
<body class="p-4 md:p-8">

    <div class="max-w-6xl mx-auto">
        <!-- Encabezado de la Aplicación -->
        <header class="text-center py-6 mb-8 bg-white shadow-lg rounded-xl">
            <h1 class="text-4xl font-extrabold text-blue-800">📊 Control de Pagos del Grupo</h1>
            <p class="mt-2 text-xl text-gray-600">Actualizado desde Google Sheets</p>
            <div id="loading" class="mt-4 text-blue-500 font-semibold hidden">Cargando datos...</div>
        </header>

        <!-- Sección de Estadísticas y Gráficos -->
        <div class="grid grid-cols-1 lg:grid-cols-3 gap-6 mb-8">

            <!-- Card: Resumen de Progreso -->
            <div class="lg:col-span-2 bg-white p-6 rounded-xl shadow-lg border-t-4 border-blue-500">
                <h2 class="text-2xl font-bold text-gray-800 mb-4">Resumen General</h2>
                <div class="flex flex-col md:flex-row justify-between items-start md:items-center mb-6">
                    <div class="mb-4 md:mb-0">
                        <p class="text-sm font-medium text-gray-500">Monto Esperado Total:</p>
                        <p id="expectedTotal" class="text-3xl font-extrabold text-gray-900">$158.40</p>
                    </div>
                    <div class="mb-4 md:mb-0">
                        <p class="text-sm font-medium text-gray-500">Monto Recaudado:</p>
                        <p id="collectedTotal" class="text-3xl font-extrabold text-green-600">$0.00</p>
                    </div>
                    <div>
                        <p class="text-sm font-medium text-gray-500">Miembros que Faltan:</p>
                        <p id="pendingMembers" class="text-3xl font-extrabold text-red-500">0</p>
                    </div>
                </div>

                <!-- Barra de Progreso -->
                <h3 class="text-lg font-semibold text-gray-700 mb-2">Progreso de Recaudación (Monto)</h3>
                <div class="w-full bg-gray-200 rounded-full h-4 mb-4">
                    <div id="progressBar" class="bg-blue-600 h-4 rounded-full transition-all duration-700" style="width: 0%"></div>
                </div>
                <p id="progressPercent" class="text-right text-sm font-medium text-gray-600">0%</p>
            </div>

            <!-- Card: Gráfico de Miembros Pagados -->
            <div class="bg-white p-6 rounded-xl shadow-lg border-t-4 border-teal-500 flex justify-center items-center">
                <div class="w-full h-64">
                    <canvas id="membersChart"></canvas>
                </div>
            </div>

        </div>

        <!-- Sección de Listado de Integrantes -->
        <div class="bg-white p-6 rounded-xl shadow-lg">
            <h2 class="text-2xl font-bold text-gray-800 mb-4">Detalle de Integrantes</h2>
            <div class="overflow-x-auto">
                <table class="min-w-full divide-y divide-gray-200">
                    <thead class="bg-gray-50">
                        <tr>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Nombre</th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Depto.</th>
                            <th class="px-6 py-3 text-center text-xs font-medium text-gray-500 uppercase tracking-wider">Pagado</th>
                            <th class="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">Monto</th>
                        </tr>
                        <!-- Fila de Filtros AÑADIDA -->
                        <tr class="bg-white border-t border-gray-200">
                            <th class="p-2">
                                <input type="text" id="filterNombre" onkeyup="filterTable()" placeholder="Filtrar nombre" class="w-full p-1 text-sm border border-gray-300 rounded focus:ring-blue-500 focus:border-blue-500">
                            </th>
                            <th class="p-2">
                                <input type="text" id="filterDept" onkeyup="filterTable()" placeholder="Filtrar depto." class="w-full p-1 text-sm border border-gray-300 rounded focus:ring-blue-500 focus:border-blue-500">
                            </th>
                            <th class="p-2">
                                <select id="filterPagado" onchange="filterTable()" class="w-full p-1 text-sm border border-gray-300 rounded focus:ring-blue-500 focus:border-blue-500">
                                    <option value="">Todos</option>
                                    <option value="true">Sí (Pagado)</option>
                                    <option value="false">No (Pendiente)</option>
                                </select>
                            </th>
                            <th class="p-2">
                                <div class="text-sm text-gray-400 p-1 text-right">Monto</div>
                            </th>
                        </tr>
                        <!-- Fin de Fila de Filtros -->
                    </thead>
                    <tbody id="memberList" class="bg-white divide-y divide-gray-200">
                        <!-- Los datos de los miembros se insertarán aquí -->
                    </tbody>
                </table>
                <p id="errorMsg" class="text-center text-red-500 mt-4 hidden">No se pudieron cargar los datos. Revisa la URL y los permisos.</p>
            </div>
        </div>

    </div>

    <script>
        // Configuración de la aplicación
        // ¡ACTUALIZADO CON EL NUEVO ID DE LA HOJA DE CÁLCULO!
        const SHEET_ID = '2PACX-1vTFbglTpzHvcw1Pm25nZr4OPQ7hjK2-KxJPnRHs5B4zVo7CPznzW2xAZm4qYgA1hHmj_EEs8P5LOzFH';
        const SHEET_NAME = 'sheet1'; // Usamos 'sheet1' por defecto
        const EXPECTED_PER_PERSON = 3.60;
        const EXPECTED_TOTAL = 158.40;
        // URL para la API de visualización de Google Sheets
        const API_URL = `https://docs.google.com/spreadsheets/d/${SHEET_ID}/gviz/tq?tqx=out:json&sheet=${SHEET_NAME}&headers=1`;
        
        // Almacena los datos completos de los miembros para el filtrado en memoria
        let membersData = [];
        let membersChartInstance = null;

        // Función auxiliar para mostrar errores
        function displayError(message) {
            document.getElementById('loading').classList.add('hidden');
            const errorMsg = document.getElementById('errorMsg');
            errorMsg.textContent = message;
            errorMsg.classList.remove('hidden');
            
            // Log de error específico para guiar al usuario
            console.error(`ERROR DE CONEXIÓN O PROCESAMIENTO: ${message}`);
            if (message.includes("No se pudo conectar")) {
                 console.error("=========================================================================================================");
                 console.error("GUÍA PARA SOLUCIONAR 'Failed to fetch' o 'Error HTTP (404/403)' con Google Sheets:");
                 console.error("1. Acceso de LECTURA: Asegúrese de que el enlace de COMPARTIR esté configurado como 'Cualquier persona con el enlace'.");
                 console.error("2. PUBLICAR EN LA WEB (CRÍTICO): Vaya a su Google Sheet -> Archivo -> Compartir -> Publicar en la web...");
                 console.error("   Asegúrese de seleccionar la 'Hoja' correcta (sheet1) y publíquela. Esto habilita el acceso para la API.");
                 console.error("=========================================================================================================");
            }
        }

        // Función para inicializar el gráfico de miembros
        function initChart(paidCount, totalCount) {
            const ctx = document.getElementById('membersChart').getContext('2d');
            
            if (membersChartInstance) {
                membersChartInstance.destroy();
            }

            membersChartInstance = new Chart(ctx, {
                type: 'doughnut',
                data: {
                    labels: ['Pagado', 'Pendiente'],
                    datasets: [{
                        label: 'Miembros',
                        data: [paidCount, totalCount - paidCount],
                        backgroundColor: ['#10B981', '#F59E0B'], // Verde esmeralda y Ámbar
                        hoverOffset: 4
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            position: 'top',
                            labels: {
                                color: '#4B5563',
                                font: {
                                    size: 14
                                }
                            }
                        },
                        title: {
                            display: true,
                            text: `Estado de Pagos (${totalCount} miembros)`,
                            font: {
                                size: 18,
                                weight: 'bold'
                            },
                            color: '#1F2937'
                        }
                    }
                }
            });
        }

        // Función para renderizar la tabla con los datos filtrados/completos
        function renderTable(data) {
            let memberListHTML = '';
            const memberListElement = document.getElementById('memberList');
            
            if (data.length === 0) {
                memberListElement.innerHTML = `
                    <tr>
                        <td colspan="4" class="px-6 py-4 text-center text-sm text-gray-500">
                            No se encontraron miembros que coincidan con los filtros.
                        </td>
                    </tr>
                `;
                return;
            }

            data.forEach((member, index) => {
                const statusIcon = member.pagado 
                    ? '<span class="text-green-500 font-bold">✓</span>' 
                    : '<span class="text-red-500 font-bold">✗</span>';
                const statusText = member.pagado ? 'Sí' : 'No';
                const statusColor = member.pagado ? 'text-green-600' : 'text-red-500';

                // Usamos el índice de la data filtrada para alternar el color de las filas
                memberListHTML += `
                    <tr class="${index % 2 === 0 ? 'bg-white' : 'bg-gray-50'} hover:bg-gray-100">
                        <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">${member.nombre}</td>
                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">${member.dept}</td>
                        <td class="px-6 py-4 whitespace-nowrap text-center text-sm ${statusColor}">
                            ${statusIcon} ${statusText}
                        </td>
                        <td class="px-6 py-4 whitespace-nowrap text-right text-sm font-medium text-gray-900">
                            $${member.monto.toFixed(2)}
                        </td>
                    </tr>
                `;
            });
            memberListElement.innerHTML = memberListHTML;
        }

        // Función para filtrar los datos de los miembros
        function filterTable() {
            const filterNombre = document.getElementById('filterNombre').value.toLowerCase();
            const filterDept = document.getElementById('filterDept').value.toLowerCase();
            const filterPagado = document.getElementById('filterPagado').value; // 'true', 'false', o ''

            const filteredData = membersData.filter(member => {
                // Filtro por Nombre (búsqueda parcial)
                const matchesNombre = member.nombre.toLowerCase().includes(filterNombre);

                // Filtro por Depto. (búsqueda parcial)
                const matchesDept = member.dept.toLowerCase().includes(filterDept);

                // Filtro por Pagado ('true', 'false', o todos si es '')
                let matchesPagado = true;
                if (filterPagado !== '') {
                    // Convertir el string del select a booleano para la comparación
                    const targetPaidStatus = filterPagado === 'true';
                    matchesPagado = member.pagado === targetPaidStatus;
                }

                return matchesNombre && matchesDept && matchesPagado;
            });

            renderTable(filteredData);
        }


        // Función principal para cargar datos y renderizar
        async function fetchDataAndRender() {
            document.getElementById('loading').classList.remove('hidden');
            
            try {
                // Hacemos la solicitud a la API de visualización de Google Sheets
                const response = await fetch(API_URL);

                if (!response.ok) {
                    // Si hay un error HTTP (404, 403), lanzamos un error explícito
                    throw new Error(`Error HTTP: ${response.statusText} (${response.status})`);
                }

                const text = await response.text();

                // La respuesta viene envuelta en google.visualization.Query.setResponse().
                // Extraemos el JSON.
                const jsonText = text.substring(
                    text.indexOf('(') + 1, 
                    text.lastIndexOf(')')
                );
                
                const data = JSON.parse(jsonText);
                
                if (data.status !== 'ok') {
                    throw new Error(data.errors?.[0]?.message || 'Error al obtener datos del Sheet.');
                }

                const rows = data.table.rows;
                const totalMembers = rows.length;

                let paidMembersCount = 0;
                let totalCollected = 0;

                // Limpiamos y procesamos los datos para guardarlos en membersData
                membersData = [];
                rows.forEach((row) => {
                    // Los datos están en 'c' (cells)
                    const nombre = row.c[0]?.v || 'N/A';
                    const dept = row.c[1]?.v || 'N/A';
                    // La columna C (índice 2) es 'pagado' (true/false)
                    // El valor en Google Sheets puede ser null si la celda está vacía
                    const pagadoCell = row.c[2];
                    const pagado = pagadoCell && pagadoCell.v === true; 
                    
                    // La columna D (índice 3) es 'monto'
                    const montoCell = row.c[3];
                    const monto = montoCell && (montoCell.v !== null && montoCell.v !== undefined) ? montoCell.v : 0; 
                    
                    const memberMonto = parseFloat(monto) || 0; // Asegurar que es un número
                    
                    membersData.push({
                        nombre: nombre,
                        dept: dept,
                        pagado: pagado,
                        monto: memberMonto
                    });

                    totalCollected += memberMonto;
                    if (pagado) {
                        paidMembersCount++;
                    }
                });

                // Cálculos finales y actualización de la UI
                const pendingMembersCount = totalMembers - paidMembersCount;
                const collectionProgress = (totalCollected / EXPECTED_TOTAL) * 100;
                
                // 1. Actualizar Estadísticas
                document.getElementById('collectedTotal').textContent = `$${totalCollected.toFixed(2)}`;
                document.getElementById('pendingMembers').textContent = pendingMembersCount;
                
                // 2. Actualizar Barra de Progreso
                const progressBar = document.getElementById('progressBar');
                progressBar.style.width = `${Math.min(collectionProgress, 100).toFixed(0)}%`;
                progressBar.className = `bg-blue-600 h-4 rounded-full transition-all duration-700 ${collectionProgress >= 100 ? 'bg-green-600' : 'bg-blue-600'}`;
                document.getElementById('progressPercent').textContent = `${collectionProgress.toFixed(2)}% de $${EXPECTED_TOTAL}`;
                
                // 3. Renderizar Gráfico
                initChart(paidMembersCount, totalMembers);

                // 4. Renderizar Lista de Miembros (Usando la data completa inicialmente)
                renderTable(membersData);

                document.getElementById('loading').classList.add('hidden');

            } catch (error) {
                // Mensaje de error mejorado para el usuario
                if (error.message.includes("Failed to fetch") || error.message.includes("Error HTTP")) {
                    displayError(`No se pudo conectar con Google Sheets. Verifica: 1. Conexión a Internet. 2. **Configuración de Publicación**: El Sheet DEBE estar publicado en la web (Archivo > Compartir > Publicar en la web...). Error: ${error.message}`);
                } else {
                    displayError(`Error al procesar datos: ${error.message}. Asegúrate de que la hoja se llame 'sheet1' y los datos sean correctos (columna C como booleanos y D como números).`);
                }
            }
        }

        // Hacemos la función filterTable accesible globalmente
        window.filterTable = filterTable; 

        // Ejecutar la función al cargar la ventana
        window.onload = fetchDataAndRender;
    </script>
</body>
</html>

